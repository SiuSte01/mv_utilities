#!/usr/bin/env perl

#Includes
use strict;
use warnings;
use Getopt::Long;
use Data::Dumper;
use File::Basename;
use Cwd;
my $scriptDir;
my $libDir;
my $envName;
my $scatterScript;
BEGIN
{
	$scriptDir = Cwd::abs_path(dirname($0));
	my $lib = dirname($scriptDir);
	if($lib =~ m/mv_utilities/)
	{
		my $mvDir = $lib;
		$lib =~ s/mv_utilities.*/perl_utilities/;
		$mvDir =~ s/mv_utilities.*/mv_utilities/;
		$libDir = Cwd::abs_path($lib) . "/lib";
		$scatterScript = $mvDir . "/scripts/scripts/OldvNew_Projections/setting_scatterQC.R";
	}
	else
	{
		$lib = `conda info -e | grep '*'`;
		$lib =~ s/^.*\*//;
		$lib =~ s/^\s+|\s+$//g;
		my $sitePath = `python -m site | grep $lib | grep site-packages`;
		$sitePath =~ s/^\s+|\s+$//g;
		$sitePath =~ s/('|,)//g;
		$libDir = $sitePath . "/lib";
		$scatterScript = $sitePath . "/scripts/scripts/OldvNew_Projections/setting_scatterQC.R";
	}
	$envName = `conda info -e | grep '*'`;
	$envName =~ s/\*.*//;
	$envName =~ s/^\s+|\s+$//g;
}
use lib $libDir;
use MiscFunctions;

my @ogArgs = @ARGV;
if(-e "debug")
{
	print "ARGV for " . $0 . ":\n";
	print Dumper(@ogArgs);
}

my $timeBegin = time();

my $debug;
my $oldDir;
my $newDir;
my $outDir;

GetOptions(
	"debug"     =>\$debug,
	"oldDir=s"	=>\$oldDir,
	"newDir=s"	=>\$newDir,
	"outDir=s"	=>\$outDir
);

die "-oldDir parameter is required\n" unless $oldDir;
die "-newDir parameter is required\n" unless $newDir;
die "-outDir parameter is required\n" unless $outDir;

foreach my $x ($oldDir,$newDir,$outDir)
{
	$x =~ s/\/+$//;
	$x = Cwd::abs_path($x);
}

my $rScript = generateRScript(oldDir=>$oldDir,newDir=>$newDir,outDir=>$outDir);
system("Rscript --vanilla " . $rScript);
system("rm " . $rScript);

#system("chmod 777 -R --silent .");

my $timeEnd = time();

my $runTime = $timeEnd - $timeBegin;
#print "\nProcess Complete: " . $0 . "\n";
my $minutes = $runTime/60;
#print "Job took " . $minutes ." minutes\n";

#End of main code

sub generateRScript
{
	my %args = @_;
	my $oldDir = $args{oldDir} || die "oldDir=> parameter is required\n";
	my $newDir = $args{newDir} || die "newDir=> parameter is required\n";
	my $outDir = $args{outDir} || die "outDir=> parameter is required\n";
	my $returnFile = "scatterQC_v2.2.R";
	open my $ofh, ">", $returnFile;
	print $ofh "###?in some versions of the INA, possibly all 1 groups, they do not bring grp1cnt into the denom_fordelivery file from ranked denom. this will need to be addressed.\n";
	print $ofh "\n";
	print $ofh "#args = commandArgs(trailingOnly=TRUE)\n";
	print $ofh "\n";
	print $ofh "olddir<-\"" . $oldDir . "\"\n";
	print $ofh "newdir<-\"" . $newDir . "\"\n";
	print $ofh "outdir<-\"" . $outDir . "\"\n";
	print $ofh "\n";
	print $ofh "suppressWarnings(dir.create(outdir))\n";
	print $ofh "\n";
	print $ofh "################################################\n";
	print $ofh "#check for INA and PXDX files###################\n";
	print $ofh "################################################\n";
	print $ofh "files<-Sys.glob(paste(olddir,\"/*\",sep=\"\"))\n";
	print $ofh "is.ina<-paste(olddir,\"/links.txt\",sep=\"\") %in% files\n";
	print $ofh "is.pxdx<-paste(olddir,\"/individuals.tab\",sep=\"\") %in% files\n";
	print $ofh "\n";
	print $ofh "if(! is.ina & ! is.pxdx){stop(\"directories should be Comb if INA or QA if PxDx\")}\n";
	print $ofh "\n";
	print $ofh "################################################\n";
	print $ofh "#function to plot scatterplot of unique values\n";
	print $ofh "scatter.unique<-function(x,y,title=\"\"){\n";
	print $ofh " max.value<-max(max(x,na.rm=T),max(y,na.rm=T))\n";
	print $ofh " unique.values<-which(!duplicated(paste(x,y)))\n";
	print $ofh " plot( x[unique.values],y[unique.values],xlab=\"Old File\",\n";
	print $ofh " ylab=\"New File\",main=title,pch=4,cex=.5,\n";
	print $ofh " xlim=c(0.1,max.value),ylim=c(0.1,max.value),log=\"xy\")\n";
	print $ofh " lines(c(0.1,max.value),c(0.1,max.value),lwd=3,col=\"red\")\n";
	print $ofh "}\n";
	print $ofh "\n";
	print $ofh "#creates a log heat map\n";
	print $ofh "plot.heatmap<-function(x,y,title=\"\"){\n";
	print $ofh " minval<-log10(min(c(x,y,na.rm=T)))\n";
	print $ofh " maxval<-log10(max(c(x,y,na.rm=T)))\n";
	print $ofh "\n";
	print $ofh " Lab.palette <- colorRampPalette(c(\"blue\", \"orange\", \"red\"), space = \"Lab\")\n";
	print $ofh " smoothScatter(log10(x),log10(y),colramp = Lab.palette,\n";
	print $ofh " xlab=\"Old File\",ylab=\"New File\",main=title,xlim=c(minval,maxval),ylim=c(minval,maxval))\n";
	print $ofh " lines(c(minval,maxval),c(minval,maxval),lwd=3,col=\"red\")\n";
	print $ofh "}\n";
	print $ofh "\n";
	print $ofh "#uses already binned data to construct bar plots\n";
	print $ofh "plot.binbars<-function(binned.data,name){\n";
	print $ofh " t1a <- as.data.frame(table(binned.data))\n";
	print $ofh " bp1<-barplot(t1a\$Freq/sum(t1a\$Freq)*100,main=name)\n";
	print $ofh " axis(1,at =bp1,labels=t1a[,1],cex.axis=.6,las=2)\n";
	print $ofh " text(bp1,0,(paste0(round((t1a\$Freq/sum(t1a\$Freq)*100),1),\"%\")),cex=0.8,pos=3,col=\"dark blue\")\n";
	print $ofh "}\n";
	print $ofh "\n";
	print $ofh "#test if change is less than a percent or a hard coded number\n";
	print $ofh "test.range<-function(percent,number,df.test,input1,input2,text,na.rm=T){\n";
	print $ofh " if (! any(grepl(input1,colnames(df.test))) | ! any(grepl(input2,colnames(df.test)))  ){stop(\"fields not found\")}\n";
	print $ofh " if(na.rm){df.test<-df.test[which(df.test[[input1]] != 0.1 & ! is.na(df.test[[input1]]) & df.test[[input2]] != 0.1 & ! is.na(df.test[[input2]])),]}\n";
	print $ofh " i<-nrow(df.test[which((df.test[[input1]]/df.test[[input2]] < percent & df.test[[input1]]/df.test[[input2]] > 1/percent) | abs(df.test[[input1]]-df.test[[input2]]) <= number),]) #values that changed by <= 5 or +/- 10%\n";
	print $ofh " percent.matching<-100*(i/nrow(df.test))\n";
	print $ofh " return(paste(text,percent.matching))\n";
	print $ofh "}\n";
	print $ofh "\n";
	print $ofh "#log10 ratio of 2 values\n";
	print $ofh "calculate.percent.of<-function(df.test,input1,input2){\n";
	print $ofh " df.test<-df.test[which(df.test[[input1]] != 0.1 & df.test[[input2]] != 0.1 & !is.na(df.test[[input1]]) & !is.na(df.test[[input2]])),]\n";
	print $ofh " return(log10(df.test[[input1]]/df.test[[input2]]))\n";
	print $ofh "}\n";
	print $ofh "\n";
	print $ofh "\n";
	print $ofh "################################################\n";
	print $ofh "if(is.ina){\n";
	print $ofh "old.linksf<-paste(olddir,\"links.txt\",sep=\"/\")\n";
	print $ofh "new.linksf<-paste(newdir,\"links.txt\",sep=\"/\")\n";
	print $ofh "old.denomf<-paste(olddir,\"denom_fordelivery.txt\",sep=\"/\")\n";
	print $ofh "new.denomf<-paste(newdir,\"denom_fordelivery.txt\",sep=\"/\")\n";
	print $ofh "old.rankedf<-paste(olddir,\"rankeddenom.txt\",sep=\"/\")\n";
	print $ofh "new.rankedf<-paste(newdir,\"rankeddenom.txt\",sep=\"/\")\n";
	print $ofh "\n";
	print $ofh "old.links<-read.table(old.linksf,sep=\"\\t\",as.is=T,quote=\"\",comment.char=\"\",header=T)\n";
	print $ofh "new.links<-read.table(new.linksf,sep=\"\\t\",as.is=T,quote=\"\",comment.char=\"\",header=T)\n";
	print $ofh "old.denom<-read.table(old.denomf,sep=\"\\t\",as.is=T,quote=\"\",comment.char=\"\",header=T)\n";
	print $ofh "new.denom<-read.table(new.denomf,sep=\"\\t\",as.is=T,quote=\"\",comment.char=\"\",header=T)\n";
	print $ofh "old.ranked<-read.table(old.rankedf,sep=\"\\t\",as.is=T,quote=\"\",comment.char=\"\",header=T)\n";
	print $ofh "new.ranked<-read.table(new.rankedf,sep=\"\\t\",as.is=T,quote=\"\",comment.char=\"\",header=T)\n";
	print $ofh "\n";
	print $ofh "old.ranked<-old.ranked[which(old.ranked\$HMS_ID %in% old.denom\$HMS_ID),]\n";
	print $ofh "new.ranked<-new.ranked[which(new.ranked\$HMS_ID %in% new.denom\$HMS_ID),]\n";
	print $ofh "\n";
	print $ofh "#change rankeddenom colnames to match denom_fordelivery\n";
	print $ofh "colnames(old.ranked)[which(colnames(old.ranked)==\"Grp1\")]<-\"Grp1Rank\"\n";
	print $ofh "colnames(old.ranked)[which(colnames(old.ranked)==\"Grp2\")]<-\"Grp2Rank\"\n";
	print $ofh "colnames(new.ranked)[which(colnames(new.ranked)==\"Grp1\")]<-\"Grp1Rank\"\n";
	print $ofh "colnames(new.ranked)[which(colnames(new.ranked)==\"Grp2\")]<-\"Grp2Rank\"\n";
	print $ofh "\n";
	print $ofh "\n";
	print $ofh "grp2test<-any(grepl(\"Grp2Rank\",colnames(old.denom))) #if Grp2Rank is present, we will treat this as a 2 group INA. rdh\n";
	print $ofh "\n";
	print $ofh "#counting nodes and edges\n";
	print $ofh "old.link.rows<-nrow(old.links)\n";
	print $ofh "old.denom.rows<-nrow(old.denom)\n";
	print $ofh "new.link.rows<-nrow(new.links)\n";
	print $ofh "new.denom.rows<-nrow(new.denom)\n";
	print $ofh "\n";
	print $ofh "link.pct.diff<-signif(100*(new.link.rows-old.link.rows)/old.link.rows,2)\n";
	print $ofh "denom.pct.diff<-signif(100*(new.denom.rows-old.denom.rows)/old.denom.rows,2)\n";
	print $ofh "\n";
	print $ofh "\n";
	print $ofh "co.denom<-merge(old.denom,new.denom,by=\"HMS_ID\",all=T)\n";
	print $ofh "co.links<-merge(old.links,new.links,by=\"VAR1\",all=T)\n";
	print $ofh "co.ranked<-merge(old.ranked,new.ranked,by=\"HMS_ID\",all=T)\n";
	print $ofh "#co.ranked<-co.denom\n";
	print $ofh "\n";
	print $ofh "##Net loss and gain\n";
	print $ofh "# num links and denom only in old/new\n";
	print $ofh "### denom\n";
	print $ofh "denom.loss <- co.denom[which(is.na(co.denom\$Grp1Rank.y) & ! is.na(co.denom\$Grp1Rank.x)),]\n";
	print $ofh "denom.gain <- co.denom[which(is.na(co.denom\$Grp1Rank.x) & ! is.na(co.denom\$Grp1Rank.y)),]\n";
	print $ofh "\n";
	print $ofh "old.denom.grp1.rows<-nrow(old.denom[which(! is.na(old.denom\$Grp1Rank)),])\n";
	print $ofh "denom.l.count <- paste(\"count of dropped IDs = \",nrow(denom.loss))\n";
	print $ofh "denom.g.count <- paste(\"count of net new IDs = \",nrow(denom.gain))\n";
	print $ofh "\n";
	print $ofh "denom.l.pct1 <- (nrow(denom.loss)/old.denom.grp1.rows)*100\n";
	print $ofh "denom.g.pct1 <- (nrow(denom.gain)/old.denom.grp1.rows)*100\n";
	print $ofh "denom.l.pct <- paste(\"percent of dropped IDs = \",denom.l.pct1)\n";
	print $ofh "denom.g.pct <- paste(\"percent of net new IDs = \",denom.g.pct1)\n";
	print $ofh "\n";
	print $ofh "if (grp2test){\n";
	print $ofh " denom.l.count <- paste(\"Grp1 count of dropped IDs = \",nrow(denom.loss))\n";
	print $ofh " denom.g.count <- paste(\"Grp1 count of net new IDs = \",nrow(denom.gain))\n";
	print $ofh " denom.l.pct <- paste(\"Grp1 percent of dropped IDs = \",denom.l.pct1)\n";
	print $ofh " denom.g.pct <- paste(\"Grp1 percent of net new IDs = \",denom.g.pct1)\n";
	print $ofh "\n";
	print $ofh "\n";
	print $ofh " denom.loss2 <- co.denom[which(is.na(co.denom\$Grp2Rank.y) & ! is.na(co.denom\$Grp2Rank.x)),]\n";
	print $ofh " denom.gain2 <- co.denom[which(is.na(co.denom\$Grp2Rank.x) & ! is.na(co.denom\$Grp2Rank.y)),]\n";
	print $ofh " denom.l.count2 <- paste(\"Grp2 count of dropped IDs = \",nrow(denom.loss2))\n";
	print $ofh " denom.g.count2 <- paste(\"Grp2 count of net new IDs = \",nrow(denom.gain2))\n";
	print $ofh "\n";
	print $ofh " old.denom.grp2.rows<-nrow(old.denom[which(! is.na(old.denom\$Grp2Rank)),])\n";
	print $ofh " denom.l.pct12 <- (nrow(denom.loss2)/old.denom.grp2.rows)*100\n";
	print $ofh " denom.g.pct12 <- (nrow(denom.gain2)/old.denom.grp2.rows)*100\n";
	print $ofh " denom.l.pct2 <- paste(\"Grp2 percent of dropped IDs = \",denom.l.pct12)\n";
	print $ofh " denom.g.pct2 <- paste(\"Grp2 percent of net new IDs = \",denom.g.pct12)\n";
	print $ofh "\n";
	print $ofh "}\n";
	print $ofh "\n";
	print $ofh "###updated the above to count only those in the new of one group but not in the old of the same group, rather than relying on rows, as those could be influenced by group2 as well. rdh.\n";
	print $ofh "\n";
	print $ofh "###links are between grp1 and 2 if there are 2, 1 and 1 if only one, so this does not need changed. rdh\n";
	print $ofh "\n";
	print $ofh "### links\n";
	print $ofh "links.loss <- subset(co.links, is.na(COUNT.y))\n";
	print $ofh "links.gain <- subset(co.links, is.na(COUNT.x))\n";
	print $ofh "\n";
	print $ofh "links.l.count <- paste(\"count of dropped links = \",nrow(links.loss))\n";
	print $ofh "links.g.count <- paste(\"count of net new links = \",nrow(links.gain))\n";
	print $ofh "links.l.pct1<- (nrow(links.loss)/old.link.rows)*100\n";
	print $ofh "links.g.pct1<- (nrow(links.gain)/old.link.rows)*100\n";
	print $ofh "\n";
	print $ofh "links.l.pct <- paste(\"percent of dropped links = \",links.l.pct1)\n";
	print $ofh "links.g.pct <- paste(\"percent of net new links = \",links.g.pct1)\n";
	print $ofh "\n";
	print $ofh "\n";
	print $ofh "### 11 by 11s that includes dropped and gained records:\n";
	print $ofh "\n";
	print $ofh "if(!grp2test){\n";
	print $ofh " denom.table<-(table(co.denom[,2],co.denom[,4],exclude=NULL))\n";
	print $ofh "}else{\n";
	print $ofh " denom.table1<-(table(co.denom[[\"Grp1Rank.x\"]],co.denom[[\"Grp1Rank.y\"]],exclude=NULL))\n";
	print $ofh " denom.table2<-(table(co.denom[[\"Grp2Rank.x\"]],co.denom[[\"Grp2Rank.y\"]],exclude=NULL))\n";
	print $ofh "}\n";
	print $ofh "\n";
	print $ofh "rank.table<-(table(co.links[,3],co.links[,5],exclude=NULL))\n";
	print $ofh "\n";
	print $ofh "###removes \"Pat\" from column names to make denom_fordelivery work in place of rankeddenom - rdh\n";
	print $ofh "colnames(co.ranked)[grep(\"Grp.*Cnt\",colnames(co.ranked))]<-gsub(\"Pat\",\"\",colnames(co.ranked)[grep(\"Grp.*Cnt\",colnames(co.ranked))])\n";
	print $ofh "\n";
	print $ofh "###in rankeddenom, piids in group2 but not group1 have NA values for group1 volume. In denom_fordelivery, they have 0. This may cause complications in how we calculate records added and lost. This is not true of ranks, only counts. In order to stop this breaking log plots, counts are set to NA.\n";
	print $ofh "if(any(grepl(\"Grp.*Cnt\",colnames(co.ranked)))){\n";
	print $ofh " co.ranked[,grep(\"Grp.*Cnt\",colnames(co.ranked))][co.ranked[,grep(\"Grp.*Cnt\",colnames(co.ranked))]==0]<-NA\n";
	print $ofh "}\n";
	print $ofh "\n";
	print $ofh "if(! grp2test){\n";
	print $ofh " co.ranked[is.na(co.ranked)]<-0.1\n";
	print $ofh " co.links[is.na(co.links)]<-0.1\n";
	print $ofh "}else{\n";
	print $ofh " co.ranked.grp1<-co.ranked[which(!is.na(co.ranked\$Grp1Rank.x) | !is.na(co.ranked\$Grp1Rank.y)),]\n";
	print $ofh " co.ranked.grp2<-co.ranked[which(!is.na(co.ranked\$Grp2Rank.x) | !is.na(co.ranked\$Grp2Rank.y)),]\n";
	print $ofh " co.ranked.grp1[is.na(co.ranked.grp1)]<-0.1\n";
	print $ofh " co.ranked.grp2[is.na(co.ranked.grp2)]<-0.1\n";
	print $ofh " co.links[is.na(co.links)]<-0.1\n";
	print $ofh "}\n";
	print $ofh "\n";
	print $ofh "###########################################################\n";
	print $ofh "###########################################################\n";
	print $ofh "\n";
	print $ofh "###\n";
	print $ofh "####calculate % good - for Denom should be change of less than 10 or within 10% of old value\n";
	print $ofh "\n";
	print $ofh "diff.breaks<-c(-Inf,log10(0.5),log10(1/1.1),log10(1/1.00001),log10(1.00001),log10(1.1),log10(2),Inf)\n";
	print $ofh "dbin.label <- paste(\">2xIncr\",\"Betwn10%and2xIncr\",\"<10%Incr\",\"NoChange\",\"<10%Decr\",\"Betwn10%and2xDecr\",\">2xDecr\",sep=\"\\t\")\n";
	print $ofh "\n";
	print $ofh "if (! grp2test){\n";
	print $ofh " dx.ranked.count.diff<-calculate.percent.of(co.ranked,\"Grp1Cnt.x\",\"Grp1Cnt.y\")\n";
	print $ofh " dx.ranked.binned<-cut(dx.ranked.count.diff,breaks=diff.breaks,labels=c(unlist(strsplit(dbin.label,split=\"\\t\"))))\n";
	print $ofh " dx.bin.ranked<-table(dx.ranked.binned)\n";
	print $ofh " if(any(grepl(\"Grp1Cnt.x\", colnames(co.ranked)))){\n";
	print $ofh "  print.dx.10<-test.range(1.1,5,co.ranked,\"Grp1Cnt.x\",\"Grp1Cnt.y\",\"Grp1 denom good 10% =\")\n";
	print $ofh "  print.dx.25<-test.range(1.25,10,co.ranked,\"Grp1Cnt.x\",\"Grp1Cnt.y\",\"Grp1 denom good 25% =\")\n";
	print $ofh " }else{\n";
	print $ofh "  print.dx.10<-test.range(1.1,5,co.ranked,\"NumConnEnt.x\",\"NumConnEnt.y\",\"Grp1 denom good 10% =\")\n";
	print $ofh "  print.dx.25<-test.range(1.25,10,co.ranked,\"NumConnEnt.x\",\"NumConnEnt.y\",\"Grp1 denom good 25% =\")\n";
	print $ofh " }\n";
	print $ofh "\n";
	print $ofh "}else{\n";
	print $ofh " ###group1  \n";
	print $ofh " dx.ranked.count.diffg1<-calculate.percent.of(co.ranked.grp1,\"Grp1Cnt.x\",\"Grp1Cnt.y\")\n";
	print $ofh " dx.ranked.binnedg1<-cut(dx.ranked.count.diffg1,breaks=diff.breaks,labels=c(unlist(strsplit(dbin.label,split=\"\\t\"))))\n";
	print $ofh " dx.bin.rankedg1<-table(dx.ranked.binnedg1)\n";
	print $ofh "\n";
	print $ofh " print.dx.10g1<-test.range(1.1,5,co.ranked.grp1,\"Grp1Cnt.x\",\"Grp1Cnt.y\",\"Grp1 denom good 10% =\")\n";
	print $ofh " print.dx.25g1<-test.range(1.25,10,co.ranked.grp1,\"Grp1Cnt.x\",\"Grp1Cnt.y\",\"Grp1 denom good 25% =\")\n";
	print $ofh "\n";
	print $ofh " ###group2\n";
	print $ofh " dx.ranked.count.diffg2<-calculate.percent.of(co.ranked.grp2,\"Grp2Cnt.x\",\"Grp2Cnt.y\")\n";
	print $ofh " dx.ranked.binnedg2<-cut(dx.ranked.count.diffg2,breaks=diff.breaks,labels=c(unlist(strsplit(dbin.label,split=\"\\t\"))))\n";
	print $ofh " dx.bin.rankedg2<-table(dx.ranked.binnedg2)\n";
	print $ofh "\n";
	print $ofh " print.dx.10g2<-test.range(1.1,5,co.ranked.grp2,\"Grp2Cnt.x\",\"Grp2Cnt.y\",\"Grp2 denom good 10% =\")\n";
	print $ofh " print.dx.25g2<-test.range(1.25,10,co.ranked.grp2,\"Grp2Cnt.x\",\"Grp2Cnt.y\",\"Grp2 denom good 25% =\")\n";
	print $ofh "}\n";
	print $ofh "\n";
	print $ofh "######################################################################\n";
	print $ofh "######################################################################\n";
	print $ofh "\n";
	print $ofh "#calculate % good - for links should be change of less than 2 or within 10% of old value\n";
	print $ofh "\n";
	print $ofh "#links.diff<-log10(co.links\$COUNT.x/co.links\$COUNT.y)\n";
	print $ofh "#links.diff2<-abs(co.links\$COUNT.x-co.links\$COUNT.y)\n";
	print $ofh "#i1<-which(links.diff2 <= 2)\n";
	print $ofh "#i2<-which((links.diff < log10(1.1)) & (links.diff > log10(1/1.1)))\n";
	print $ofh "#i<-union(i1,i2)\n";
	print $ofh "#links.good<-100*(length(i)/length(links.diff2))\n";
	print $ofh "#links.good.pct<-paste(\"percent links good = \",links.good)\n";
	print $ofh "\n";
	print $ofh "links.good.pct<-test.range(1.1,5,co.links,\"COUNT.x\",\"COUNT.y\",\"Percent links good =\")\n";
	print $ofh "links.diff<-calculate.percent.of(co.links,\"COUNT.x\",\"COUNT.y\")\n";
	print $ofh "\n";
	print $ofh "links.binned<-cut(links.diff,breaks=diff.breaks,labels=c(\">2xIncr\",\"Betwn10%and2xIncr\",\"<10%Incr\",\"NoChange\",\"<10%Decr\",\"Betwn10%and2xDecr\",\">2xDecr\"))\n";
	print $ofh "bin.links <- table(links.binned)\n";
	print $ofh "lbin.label <- paste(\">2xIncr\",\"Betwn10%and2xIncr\",\"<10%Incr\",\"NoChange\",\"<10%Decr\",\"Betwn10%and2xDecr\",\">2xDecr\")\n";
	print $ofh "\n";
	print $ofh "\n";
	print $ofh "\n";
	print $ofh "#### ------------------------ OUTPUT CHURN ----------\n";
	print $ofh "## combine results into one DF for export\n";
	print $ofh "\n";
	print $ofh "sink(paste(outdir,\"scatterqc_output.txt\",sep=\"/\"))\n";
	print $ofh "cat(\"Old directory: \",olddir,\"\\n\")\n";
	print $ofh "cat(\"New directory: \",newdir,\"\\n\\n\")\n";
	print $ofh "if(! grp2test){\n";
	print $ofh " cat(\"Record Count Comparisons\",\"\\n\")\n";
	print $ofh " cat(\"\\tFile\\tOld_Count\\tNew_Count\\tPct_Change\\n\")\n";
	print $ofh " cat(\"\\tlinks\\t\",old.link.rows,\"\\t\",new.link.rows,\"\\t\",link.pct.diff,\"\\n\")\n";
	print $ofh " cat(\"\\tdenom\\t\",old.denom.rows,\"\\t\",new.denom.rows,\"\\t\",denom.pct.diff,\"\\n\")\n";
	print $ofh " cat(\"\\n\\n\",\"----------------------------------------------------------\",\"\\n\\n\")\n";
	print $ofh " cat(\"Churn results Grp1\",\"\\n\")\n";
	print $ofh " cat(\"\\t\",print.dx.10,\"\\n\")\n";
	print $ofh " cat(\"\\t\",print.dx.25,\"\\n\")\n";
	print $ofh " cat(\"\\t\",denom.l.count,\"\\n\\t\",denom.l.pct,\"\\n\\t\",denom.g.count,\"\\n\\t\",denom.g.pct,\"\\n\\n\")\n";
	print $ofh " cat(\"Denom change distr\",\"\\n\")\n";
	print $ofh " print(data.frame(\"Level\"=unlist(dimnames(dx.bin.ranked)),\"Count\"=as.integer(dx.bin.ranked),row.names=NULL),right=F,row.names=F)\n";
	print $ofh " cat(\"\\n11 by 11 table for denom ranks\\n\")\n";
	print $ofh " print(denom.table)\n";
	print $ofh " cat(\"\\n\\n\",\"----------------------------------------------------------\",\"\\n\\n\")\n";
	print $ofh " cat(\"Churn results Links\\n\")\n";
	print $ofh " cat(\"\\t\",links.good.pct,\"\\n\\t\",links.l.count,\"\\n\\t\",links.l.pct,\"\\n\\t\",links.g.count,\"\\n\\t\",links.g.pct,\"\\n\\n\",sep=\"\")\n";
	print $ofh " cat(\"Link change distr\\n\")\n";
	print $ofh " print(data.frame(\"Level\"=unlist(dimnames(bin.links)),\"Count\"=as.integer(bin.links),row.names=NULL),right=F,row.names=F)\n";
	print $ofh " cat(\"\\n11 by 11 table for SOR values\\n\")\n";
	print $ofh " print(rank.table)\n";
	print $ofh "\n";
	print $ofh "}else{\n";
	print $ofh " {\n";
	print $ofh "  cat(\"Record Count Comparisons\",\"\\n\")\n";
	print $ofh "  cat(\"\\tFile\\tOld_Count\\tNew_Count\\tPct_Change\\n\")\n";
	print $ofh "  cat(\"\\tlinks\\t\",old.link.rows,\"\\t\",new.link.rows,\"\\t\",link.pct.diff,\"\\n\")\n";
	print $ofh "  cat(\"\\tdenom\\t\",old.denom.rows,\"\\t\",new.denom.rows,\"\\t\",denom.pct.diff,\"\\n\")\n";
	print $ofh "  cat(\"\\n\\n\",\"----------------------------------------------------------\",\"\\n\\n\")\n";
	print $ofh "  cat(\"Churn results Grp1\",\"\\n\")\n";
	print $ofh "  cat(\"\\t\",print.dx.10g1,\"\\n\")\n";
	print $ofh "  cat(\"\\t\",print.dx.25g1,\"\\n\")\n";
	print $ofh "  cat(\"\\t\",denom.l.count,\"\\n\\t\",denom.l.pct,\"\\n\\t\",denom.g.count,\"\\n\\t\",denom.g.pct,\"\\n\\n\")\n";
	print $ofh "  cat(\"Denom change distr\",\"\\n\")\n";
	print $ofh "  print(data.frame(\"Level\"=unlist(dimnames(dx.bin.rankedg1)),\"Count\"=as.integer(dx.bin.rankedg1),row.names=NULL),right=F,row.names=F)\n";
	print $ofh "  cat(\"\\n11 by 11 table for Grp1 denom ranks\\n\")\n";
	print $ofh "  print(denom.table1)\n";
	print $ofh "  cat(\"\\n\\n\",\"----------------------------------------------------------\",\"\\n\\n\")\n";
	print $ofh "  cat(\"Churn results Grp2\",\"\\n\")\n";
	print $ofh "  cat(\"\\t\",print.dx.10g2,\"\\n\")\n";
	print $ofh "  cat(\"\\t\",print.dx.25g2,\"\\n\")\n";
	print $ofh "  cat(\"\\t\",denom.l.count2,\"\\n\\t\",denom.l.pct2,\"\\n\\t\",denom.g.count2,\"\\n\\t\",denom.g.pct2,\"\\n\\n\")\n";
	print $ofh "  cat(\"Denom change distr\",\"\\n\")\n";
	print $ofh "  print(data.frame(\"Level\"=unlist(dimnames(dx.bin.rankedg2)),\"Count\"=as.integer(dx.bin.rankedg2),row.names=NULL),right=F,row.names=F)\n";
	print $ofh "  cat(\"\\n11 by 11 table for Grp2 denom ranks\\n\")\n";
	print $ofh "  print(denom.table2)\n";
	print $ofh "  cat(\"\\n\\n\",\"----------------------------------------------------------\",\"\\n\\n\")\n";
	print $ofh "  cat(\"Churn results Links\\n\")\n";
	print $ofh "  cat(\"\\t\",links.good.pct,\"\\n\\t\",links.l.count,\"\\n\\t\",links.l.pct,\"\\n\\t\",links.g.count,\"\\n\\t\",links.g.pct,\"\\n\\n\",sep=\"\")\n";
	print $ofh "  cat(\"Link change distr\\n\")\n";
	print $ofh "  print(data.frame(\"Level\"=unlist(dimnames(bin.links)),\"Count\"=as.integer(bin.links),row.names=NULL),right=F,row.names=F)\n";
	print $ofh "  cat(\"\\n11 by 11 table for SOR values\\n\")\n";
	print $ofh "  print(rank.table)\n";
	print $ofh " }\n";
	print $ofh "}\n";
	print $ofh "sink()\n";
	print $ofh "\n";
	print $ofh "pdf(paste(outdir,\"comparisons.pdf\",sep=\"/\"),onefile=T)\n";
	print $ofh "\n";
	print $ofh "#plots of link counts - rdh\n";
	print $ofh "scatter.unique(co.links\$COUNT.x,co.links\$COUNT.y,\"Links\")\n";
	print $ofh "plot.heatmap(co.links\$COUNT.x,co.links\$COUNT.y,\"Links\")\n";
	print $ofh "plot.binbars(links.binned,\"Links Binned Changes\")\n";
	print $ofh "\n";
	print $ofh "if(! grp2test){ \n";
	print $ofh " scatter.unique(co.ranked\$Grp1Cnt.x,co.ranked\$Grp1Cnt.y,\"Group 1 denom\")\n";
	print $ofh " plot.heatmap(co.ranked\$Grp1Cnt.x,co.ranked\$Grp1Cnt.y,\"Group 1 denom\")\n";
	print $ofh " plot.binbars(dx.ranked.binned,\"Group 1 Binned Changes\")\n";
	print $ofh "}else{\n";
	print $ofh " #group1 plots\n";
	print $ofh " scatter.unique(co.ranked.grp1\$Grp1Cnt.x,co.ranked.grp1\$Grp1Cnt.y,\"Group 1 denom\")\n";
	print $ofh " plot.heatmap(co.ranked.grp1\$Grp1Cnt.x,co.ranked.grp1\$Grp1Cnt.y,\"Group 1 denom\")\n";
	print $ofh " plot.binbars(dx.ranked.binnedg1,\"Group 1 Binned Changes\")\n";
	print $ofh " #group2 plots\n";
	print $ofh " scatter.unique(co.ranked.grp2\$Grp1Cnt.x,co.ranked.grp2\$Grp1Cnt.y,\"Group 2 denom\")\n";
	print $ofh " plot.heatmap(co.ranked.grp2\$Grp1Cnt.x,co.ranked.grp2\$Grp1Cnt.y,\"Group 2 denom\")\n";
	print $ofh " plot.binbars(dx.ranked.binnedg2,\"Group 2 Binned Changes\")\n";
	print $ofh "}\n";
	print $ofh "\n";
	print $ofh "dev.off()\n";
	print $ofh "\n";
	print $ofh "} #end if(is.na)\n";
	print $ofh "\n";
	print $ofh "\n";
	print $ofh "##########\n";
	print $ofh "###pxdx###\n";
	print $ofh "##########\n";
	print $ofh "\n";
	print $ofh "if(is.pxdx){\n";
	print $ofh "\n";
	print $ofh "if(! is.ina){\n";
	print $ofh " sink(paste(outdir,\"scatterqc_output.txt\",sep=\"/\"))\n";
	print $ofh "}else{\n";
	print $ofh " sink(paste(outdir,\"scatterqc_output.txt\",sep=\"/\"),append=T)\n";
	print $ofh "}\n";
	print $ofh "\n";
	print $ofh "cat(\"Old directory: \",olddir,\"\\n\")\n";
	print $ofh "cat(\"New directory: \",newdir,\"\\n\\n\")\n";
	print $ofh "\n";
	print $ofh "old.indivf<-paste(olddir,\"individuals.tab\",sep=\"/\")\n";
	print $ofh "new.indivf<-paste(newdir,\"individuals.tab\",sep=\"/\")\n";
	print $ofh "old.orgf<-paste(olddir,\"organizations.tab\",sep=\"/\")\n";
	print $ofh "new.orgf<-paste(newdir,\"organizations.tab\",sep=\"/\")\n";
	print $ofh "old.pxdxf<-paste(olddir,\"pxdx.tab\",sep=\"/\")\n";
	print $ofh "new.pxdxf<-paste(newdir,\"pxdx.tab\",sep=\"/\")\n";
	print $ofh "\n";
	print $ofh "old.indivs<-read.table(old.indivf,sep=\"\\t\",as.is=T,quote=\"\",comment.char=\"\",header=T)\n";
	print $ofh "new.indivs<-read.table(new.indivf,sep=\"\\t\",as.is=T,quote=\"\",comment.char=\"\",header=T)\n";
	print $ofh "old.orgs<-read.table(old.orgf,sep=\"\\t\",as.is=T,quote=\"\",comment.char=\"\",header=T)\n";
	print $ofh "new.orgs<-read.table(new.orgf,sep=\"\\t\",as.is=T,quote=\"\",comment.char=\"\",header=T)\n";
	print $ofh "old.pxdx1<-read.table(old.pxdxf,sep=\"\\t\",as.is=T,quote=\"\",comment.char=\"\",header=T)\n";
	print $ofh "new.pxdx1<-read.table(new.pxdxf,sep=\"\\t\",as.is=T,quote=\"\",comment.char=\"\",header=T)\n";
	print $ofh "\n";
	print $ofh "i1<-grep(\"PRACTITIONER_TOTAL\",colnames(old.indivs))\n";
	print $ofh "old.indiv<-old.indivs[,c(1,i1)]\n";
	print $ofh "i1<-grep(\"PRACTITIONER_TOTAL\",colnames(new.indivs))\n";
	print $ofh "new.indiv<-new.indivs[,c(1,i1)]\n";
	print $ofh "\n";
	print $ofh "i1<-grep(\"FAC_TOTAL\",colnames(old.orgs))\n";
	print $ofh "old.org<-old.orgs[,c(1,i1)]\n";
	print $ofh "i1<-grep(\"FAC_TOTAL\",colnames(new.orgs))\n";
	print $ofh "new.org<-new.orgs[,c(1,i1)]\n";
	print $ofh "\n";
	print $ofh "i1<-grep(\"PRACTITIONER_FAC_TOTAL\",colnames(old.pxdx1))\n";
	print $ofh "wantcols<-c(\"HMS_PIID\",\"HMS_POID\",colnames(old.pxdx1)[i1])\n";
	print $ofh "old.pxdx<-old.pxdx1[,wantcols]\n";
	print $ofh "i1<-grep(\"PRACTITIONER_FAC_TOTAL\",colnames(new.pxdx1))\n";
	print $ofh "wantcols<-c(\"HMS_PIID\",\"HMS_POID\",colnames(new.pxdx1)[i1])\n";
	print $ofh "new.pxdx<-new.pxdx1[,wantcols]\n";
	print $ofh "\n";
	print $ofh "cat(\"Record Count Comparisons\\n\")\n";
	print $ofh "old.indiv.rows<-nrow(old.indiv)\n";
	print $ofh "old.org.rows<-nrow(old.org)\n";
	print $ofh "old.pxdx.rows<-nrow(old.pxdx)\n";
	print $ofh "new.indiv.rows<-nrow(new.indiv)\n";
	print $ofh "new.org.rows<-nrow(new.org)\n";
	print $ofh "new.pxdx.rows<-nrow(new.pxdx)\n";
	print $ofh "indiv.pct.diff<-signif(100*(new.indiv.rows-old.indiv.rows)/old.indiv.rows,2)\n";
	print $ofh "org.pct.diff<-signif(100*(new.org.rows-old.org.rows)/old.org.rows,2)\n";
	print $ofh "pxdx.pct.diff<-signif(100*(new.pxdx.rows-old.pxdx.rows)/old.pxdx.rows,2)\n";
	print $ofh "cat(\"\\tFile\\tOld_Count\\tNew_Count\\tPct_Change\\n\")\n";
	print $ofh "cat(\"\\tIndivs\\t\",old.indiv.rows,\"\\t\",new.indiv.rows,\"\\t\",paste0(indiv.pct.diff,\"%\"),\"\\n\")\n";
	print $ofh "cat(\"\\tOrgs\\t\",old.org.rows,\"\\t\\t\",new.org.rows,\"\\t\\t\",paste0(org.pct.diff,\"%\"),\"\\n\")\n";
	print $ofh "cat(\"\\tPxDx\\t\",old.pxdx.rows,\"\\t\",new.pxdx.rows,\"\\t\",paste0(pxdx.pct.diff,\"%\"),\"\\n\\n\")\n";
	print $ofh "\n";
	print $ofh "co.indiv<-merge(old.indiv,new.indiv,by=\"HMS_PIID\",all=T)\n";
	print $ofh "co.org<-merge(old.org,new.org,by=\"HMS_POID\",all=T)\n";
	print $ofh "co.pxdx<-merge(old.pxdx,new.pxdx,by=c(\"HMS_PIID\",\"HMS_POID\"),all=T)\n";
	print $ofh "\n";
	print $ofh "for(i in c(2,3))\n";
	print $ofh "{\n";
	print $ofh " idx<-which(is.na(co.indiv[,i]))\n";
	print $ofh " if(length(idx) > 0) {\n";
	print $ofh "   co.indiv[idx,i]<-0.1\n";
	print $ofh " }\n";
	print $ofh " idx<-which(is.na(co.org[,i]))\n";
	print $ofh " if(length(idx) > 0) {\n";
	print $ofh "   co.org[idx,i]<-0.1\n";
	print $ofh " }\n";
	print $ofh "}\n";
	print $ofh "for(i in c(3,4))\n";
	print $ofh "{\n";
	print $ofh " idx<-which(is.na(co.pxdx[,i]))\n";
	print $ofh " if(length(idx) > 0) {\n";
	print $ofh "   co.pxdx[idx,i]<-0.1\n";
	print $ofh " }\n";
	print $ofh "}\n";
	print $ofh "\n";
	print $ofh "#counts of differences\n";
	print $ofh "diff.breaks<-c(-Inf,log10(0.5),log10(1/1.1),log10(1/1.00001),\n";
	print $ofh "log10(1.00001),log10(1.1),log10(2),Inf)\n";
	print $ofh "indiv.diff<-log10(co.indiv[,2]/co.indiv[,3])\n";
	print $ofh "indiv.binned<-cut(indiv.diff,breaks=diff.breaks,labels=c(\">2xIncr\",   \n";
	print $ofh "\"Betwn10%and2xIncr\",\"<10%Incr\",\"NoChange\",\"<10%Decr\",\"Betwn10%and2xDecr\",\n";
	print $ofh "\">2xDecr\"))\n";
	print $ofh "cat(\"Indiv Change Distribution\\n\")\n";
	print $ofh "# print(table(indiv.binned))\n";
	print $ofh "indiv.diff2<-abs(co.indiv[,2]-co.indiv[,3])\n";
	print $ofh "i1<-which(indiv.diff2 <= 10)\n";
	print $ofh "i2<-which((indiv.diff < log10(1.1)) & (indiv.diff > log10(1/1.1)))\n";
	print $ofh "i<-union(i1,i2)\n";
	print $ofh "pct.good<-100*(length(i)/length(indiv.diff2))\n";
	print $ofh "cat(\"\\tTotal percent good = \",pct.good,\"\\n\")\n";
	print $ofh "cat(\"\\tCount of records within absolute value of 10 = \",length(i1),\"\\n\")\n";
	print $ofh "cat(\"\\tPercent of records within absolute value of 10 = \", length(i1)/nrow(co.indiv)*100,\"\\n\")\n";
	print $ofh "cat(\"\\tCount of records within log 10 = \",length(i2),\"\\n\")\n";
	print $ofh "cat(\"\\tPercent of records within log 10 = \", length(i2)/nrow(co.indiv)*100,\"\\n\")\n";
	print $ofh "\n";
	print $ofh "\n";
	print $ofh "# print(length(i))\n";
	print $ofh "\n";
	print $ofh "bad<-co.indiv[-i,]\n";
	print $ofh "cat(\"\\tNumber of bad indiv records = \", nrow(bad),\"\\n\\n\")\n";
	print $ofh "\n";
	print $ofh "write.table(bad,file=paste(outdir,\"indiv_bad_records.txt\",sep=\"/\"),row.names=F,col.names=T,quote=F,sep=\"\\t\")\n";
	print $ofh "org.diff<-log10(co.org[,2]/co.org[,3])\n";
	print $ofh "org.binned<-cut(org.diff,breaks=diff.breaks,labels=c(\">2xIncr\",\n";
	print $ofh "\"Betwn10%and2xIncr\",\"<10%Incr\",\"NoChange\",\"<10%Decr\",\"Betwn10%and2xDecr\",\n";
	print $ofh "\">2xDecr\"))\n";
	print $ofh "cat(\"Org Change Distribution\\n\")\n";
	print $ofh "# print(table(org.binned))\n";
	print $ofh "org.diff2<-abs(co.org[,2]-co.org[,3])\n";
	print $ofh "i1<-which(org.diff2 <= 10)\n";
	print $ofh "i2<-which((org.diff < log10(1.1)) & (org.diff > log10(1/1.1)))\n";
	print $ofh "i<-union(i1,i2)\n";
	print $ofh "pct.good<-100*(length(i)/length(org.diff2))\n";
	print $ofh "cat(\"\\tTotal percent good = \",pct.good,\"\\n\")\n";
	print $ofh "cat(\"\\tCount of records within absolute value of 10 = \",length(i1),\"\\n\")\n";
	print $ofh "cat(\"\\tPercent of records within absolute value of 10 = \", length(i1)/nrow(co.org)*100,\"\\n\")\n";
	print $ofh "cat(\"\\tCount of records within log 10 = \",length(i2),\"\\n\")\n";
	print $ofh "cat(\"\\tPercent of records within log 10 = \", length(i2)/nrow(co.org)*100,\"\\n\")\n";
	print $ofh "\n";
	print $ofh "# print(length(i))\n";
	print $ofh "\n";
	print $ofh "bad<-co.org[-i,]\n";
	print $ofh "cat(\"\\tNumber of bad org records = \", nrow(bad),\"\\n\\n\")\n";
	print $ofh "write.table(bad,file=paste(outdir,\"org_bad_records.txt\",sep=\"/\"),row.names=F,col.names=T,quote=F,sep=\"\\t\")\n";
	print $ofh "\n";
	print $ofh "pxdx.diff<-log10(co.pxdx[,3]/co.pxdx[,4])\n";
	print $ofh "pxdx.binned<-cut(pxdx.diff,breaks=diff.breaks,labels=c(\">2xIncr\",\n";
	print $ofh "\"Betwn10%and2xIncr\",\"<10%Incr\",\"NoChange\",\"<10%Decr\",\"Betwn10%and2xDecr\",\n";
	print $ofh "\">2xDecr\"))\n";
	print $ofh "cat(\"PxDx Change Distribution\\n\")\n";
	print $ofh "# print(table(pxdx.binned))\n";
	print $ofh "pxdx.diff2<-abs(co.pxdx[,3]-co.pxdx[,4])\n";
	print $ofh "i1<-which(pxdx.diff2 <= 10)\n";
	print $ofh "i2<-which((pxdx.diff < log10(1.1)) & (pxdx.diff > log10(1/1.1)))\n";
	print $ofh "i<-union(i1,i2)\n";
	print $ofh "pct.good<-100*(length(i)/length(pxdx.diff2))\n";
	print $ofh "cat(\"\\tTotal percent good = \",pct.good,\"\\n\")\n";
	print $ofh "cat(\"\\tCount of records within absolute value of 10 = \",length(i1),\"\\n\")\n";
	print $ofh "cat(\"\\tPercent of records within absolute value of 10 = \", length(i1)/nrow(co.pxdx)*100,\"\\n\")\n";
	print $ofh "cat(\"\\tCount of records within log 10 = \",length(i2),\"\\n\")\n";
	print $ofh "cat(\"\\tPercent of records within log 10 = \", length(i2)/nrow(co.pxdx)*100,\"\\n\")\n";
	print $ofh "\n";
	print $ofh "# print(length(i))\n";
	print $ofh "\n";
	print $ofh "bad<-co.pxdx[-i,]\n";
	print $ofh "cat(\"\\tNumber of bad PxDx records = \", nrow(bad),\"\\n\\n\")\n";
	print $ofh "write.table(bad,file=paste(outdir,\"pxdx_bad_records.txt\",sep=\"/\"),row.names=F,col.names=T,quote=F,sep=\"\\t\")\n";
	print $ofh "\n";
	print $ofh "sink()\n";
	print $ofh "\n";
	print $ofh "pdf(paste(outdir,\"comparisons.pdf\",sep=\"/\"),onefile=T)\n";
	print $ofh "scatter.unique(co.indiv[,2],co.indiv[,3],\"Indivs Volume Plot\")\n";
	print $ofh "#indiv.max<-max(max(co.indiv[,2]),max(co.indiv[,3]))\n";
	print $ofh "#indiv.min<-min(min(co.indiv[,2]),min(co.indiv[,3]))\n";
	print $ofh "#l.indivmax<-log10(indiv.max)\n";
	print $ofh "#l.indivmin<-log10(indiv.min)\n";
	print $ofh "#plot(co.indiv[,2],co.indiv[,3],xlab=\"Old\",\n";
	print $ofh "#ylab=\"New\",main=\"Indivs Volume Plot\",pch=4,cex=.5,\n";
	print $ofh "#xlim=c(.1,indiv.max),ylim=c(0.1,indiv.max),log=\"xy\")\n";
	print $ofh "#lines(c(0.1,indiv.max),c(0.1,indiv.max),lwd=3,col=\"red\")\n";
	print $ofh "###replaced by function - rdh\n";
	print $ofh "#Lab.palette <- colorRampPalette(c(\"blue\", \"orange\", \"red\"), space = \"Lab\")\n";
	print $ofh "#smoothScatter(log10(co.indiv[,2]),log10(co.indiv[,3]),colramp = Lab.palette,\n";
	print $ofh "#xlab=\"Old\",ylab=\"New\",main=\"Indivs Volume Heat Map\",xlim=c(l.indivmin,l.indivmax),ylim=c(l.indivmin,l.indivmax))\n";
	print $ofh "#lines(c(l.indivmin,l.indivmax),c(l.indivmin,l.indivmax),lwd=3,col=\"red\")\n";
	print $ofh "plot.heatmap(co.indiv[,2],co.indiv[,3],\"Indivs Volume Heat Map\")\n";
	print $ofh "\n";
	print $ofh "scatter.unique(co.org[,2],co.org[,3],\"Orgs Volume Plot\")\n";
	print $ofh "#org.max<-max(max(co.org[,2]),max(co.org[,3]))\n";
	print $ofh "#org.min<-min(min(co.org[,2]),min(co.indiv[,3]))\n";
	print $ofh "#l.orgmax<-log10(org.max)\n";
	print $ofh "#l.orgmin<-log10(org.min)\n";
	print $ofh "#plot(co.org[,2],co.org[,3],xlab=\"Old\",\n";
	print $ofh "#ylab=\"New\",main=\"Orgs Volume Plot\",pch=4,cex=.5,\n";
	print $ofh "#xlim=c(.1,org.max),ylim=c(0.1,org.max),log=\"xy\")\n";
	print $ofh "#lines(c(0.1,org.max),c(0.1,org.max),lwd=3,col=\"red\")\n";
	print $ofh "###replaced by function - rdh\n";
	print $ofh "#Lab.palette <- colorRampPalette(c(\"blue\", \"orange\", \"red\"), space = \"Lab\")\n";
	print $ofh "#smoothScatter(log10(co.org[,2]),log10(co.org[,3]),colramp = Lab.palette,\n";
	print $ofh "#xlab=\"Old\",ylab=\"New\",main=\"Orgs Volume Heat Map\",xlim=c(l.orgmin,l.orgmax),ylim=c(l.orgmin,l.orgmax))\n";
	print $ofh "#lines(c(l.orgmin,l.orgmax),c(l.orgmin,l.orgmax),lwd=3,col=\"red\")\n";
	print $ofh "plot.heatmap(co.org[,2],co.org[,3],\"Orgs Volume Heat Map\")\n";
	print $ofh "\n";
	print $ofh "scatter.unique(co.pxdx[,3],co.pxdx[,4],\"PxDx Volume Plot\")\n";
	print $ofh "#pxdx.max<-max(max(co.pxdx[,3]),max(co.pxdx[,4]))\n";
	print $ofh "#pxdx.min<-min(min(co.pxdx[,3]),min(co.pxdx[,4]))\n";
	print $ofh "#l.pxdxmin<-log10(pxdx.min)\n";
	print $ofh "#l.pxdxmax<-log10(pxdx.max)\n";
	print $ofh "#plot(co.pxdx[,3],co.pxdx[,4],xlab=\"Old\",\n";
	print $ofh "#ylab=\"New\",main=\"PxDx Volume Plot\",pch=4,cex=.5,\n";
	print $ofh "#xlim=c(.1,pxdx.max),ylim=c(0.1,pxdx.max),log=\"xy\")\n";
	print $ofh "#lines(c(0.1,pxdx.max),c(0.1,pxdx.max),lwd=3,col=\"red\")\n";
	print $ofh "###replaced by function - rdh\n";
	print $ofh "#Lab.palette <- colorRampPalette(c(\"blue\", \"orange\", \"red\"), space = \"Lab\")\n";
	print $ofh "#smoothScatter(log10(co.pxdx[,3]),log10(co.pxdx[,4]),colramp = Lab.palette,\n";
	print $ofh "#xlab=\"Old\",ylab=\"New\",main=\"PxDx Volume Heat Map\",xlim=c(l.pxdxmin,l.pxdxmax),ylim=c(l.pxdxmin,l.pxdxmax))\n";
	print $ofh "#lines(c(l.pxdxmin,l.pxdxmax),c(l.pxdxmin,l.pxdxmax),lwd=3,col=\"red\")\n";
	print $ofh "###\n";
	print $ofh "plot.heatmap(co.pxdx[,3],co.pxdx[,4],\"PxDx Volume Heat Map\")\n";
	print $ofh "\n";
	print $ofh "# dev.off()\n";
	print $ofh "\n";
	print $ofh "\n";
	print $ofh "\n";
	print $ofh "# Graph of binned numbers -------------------------------------------------\n";
	print $ofh "\n";
	print $ofh "\n";
	print $ofh "#Adding labels for the binned %s\n";
	print $ofh "bin.labels<-c(\">2xIncr\",\"10%to2xIncr\",\"<10%Incr\",\"NoChange\",\"<10%Decr\",\"10%to2xDecr\",\">2xDecr\")\n";
	print $ofh "\n";
	print $ofh "#Graph of bins for each file\n";
	print $ofh "#Converted to data frame to have more control over labels and graph\n";
	print $ofh "###########replaced by function - rdh\n";
	print $ofh "#t1 <- table(factor(indiv.binned, levels = levels(indiv.binned)))\n";
	print $ofh "#t1a<-as.data.frame(t1)\n";
	print $ofh "#bp1<-barplot(t1a\$Freq/sum(t1a\$Freq)*100,main=\"Indivs Binned Changes\")\n";
	print $ofh "#axis(1,at =bp1,labels=bin.labels,cex.axis=.6,las=2)\n";
	print $ofh "#text(bp1,0,(paste0(round((t1/sum(t1)*100),1),\"%\")),cex=0.8,pos=3,col=\"dark blue\")\n";
	print $ofh "#\n";
	print $ofh "#t2 <- table(factor(org.binned, levels = levels(org.binned)))\n";
	print $ofh "#t2a<-as.data.frame(t2)\n";
	print $ofh "#bp2<-barplot(t2a\$Freq/sum(t2a\$Freq)*100,main=\"Orgs Binned Changes\")\n";
	print $ofh "#axis(1,at =bp2,labels=bin.labels,cex.axis=.6,las=2)\n";
	print $ofh "#text(bp2,0,(paste0(round((t2/sum(t2)*100),1),\"%\")),cex=0.8,pos=3,col=\"dark blue\")\n";
	print $ofh "#\n";
	print $ofh "#t3 <- table(factor(pxdx.binned, levels = levels(pxdx.binned)))\n";
	print $ofh "#t3a<-as.data.frame(t3)\n";
	print $ofh "#bp3<-barplot(t3a\$Freq/sum(t3a\$Freq)*100,main=\"PxDx Binned Changes\")\n";
	print $ofh "#axis(1,at =bp3,labels=bin.labels,cex.axis=.6,las=2)\n";
	print $ofh "#text(bp3,0,(paste0(round((t3/sum(t3)*100),1),\"%\")),cex=0.8,pos=3,col=\"dark blue\")\n";
	print $ofh "############\n";
	print $ofh "\n";
	print $ofh "plot.binbars(indiv.binned,\"Indivs Binned Changes\")\n";
	print $ofh "plot.binbars(org.binned,\"Orgs Binned Changes\")\n";
	print $ofh "plot.binbars(pxdx.binned,\"PxDx Binned Changes\")\n";
	print $ofh "\n";
	print $ofh "dev.off()\n";
	print $ofh "\n";
	print $ofh "\n";
	print $ofh "# 11 x 11 Comparison: Indivs ---------------------------------------------------------\n";
	print $ofh "sink(paste(outdir,\"scatterqc_output.txt\",sep=\"/\"),append = T)\n";
	print $ofh "\n";
	print $ofh "#Indivs Old: Grab just PIID and rank column. Change rank name to label as old.\n";
	print $ofh "old.indiv.rank<-old.indivs[,c(1,19)]\n";
	print $ofh "colnames(old.indiv.rank)[2] <- \"OLD_Rank\"\n";
	print $ofh "\n";
	print $ofh "#Indivs New: Grab just PIID and rank column. Change rank name to label as new.\n";
	print $ofh "new.indiv.rank<-new.indivs[,c(1,19)]\n";
	print $ofh "colnames(new.indiv.rank)[2] <- \"NEW_Prac_Natl_Rank\"\n";
	print $ofh "\n";
	print $ofh "#Indivs Compare: Merge ranks and run old rank vs. new rank crosstab\n";
	print $ofh "merged.indiv.rank<-merge(old.indiv.rank,new.indiv.rank,all=T)\n";
	print $ofh "cat(\"\\n\\nIndivs: Rank Comparison\\n\\n\")\n";
	print $ofh "print(table(merged.indiv.rank[, 2:3],exclude=NULL))\n";
	print $ofh "\n";
	print $ofh "\n";
	print $ofh "\n";
	print $ofh "# 11 x 11 Comparison: Orgs ------------------------------------------------\n";
	print $ofh "\n";
	print $ofh "#Orgs Old: Grab just POID and rank column. Change rank name to label as old.\n";
	print $ofh "old.org.rank<-old.orgs[,c(1,14)]\n";
	print $ofh "colnames(old.org.rank)[2] <- \"OLD_Rank\"\n";
	print $ofh "\n";
	print $ofh "#Orgs New: Grab just POID and rank column. Change rank name to label as new.\n";
	print $ofh "new.org.rank<-new.orgs[,c(1,14)]\n";
	print $ofh "colnames(new.org.rank)[2] <- \"NEW_Fac_Natl_Rank\"\n";
	print $ofh "\n";
	print $ofh "#Orgs Compare: Merge ranks and run old rank vs. new rank crosstab\n";
	print $ofh "merged.org.rank<-merge(old.org.rank,new.org.rank,all=T)\n";
	print $ofh "cat(\"\\n\\nOrgs: Rank Comparison\\n\\n\")\n";
	print $ofh "print(table(merged.org.rank[, 2:3],exclude=NULL))\n";
	print $ofh "\n";
	print $ofh "\n";
	print $ofh "# # 11 x 11 Comparison: PxDx ------------------------------------------------\n";
	print $ofh "# \n";
	print $ofh "# #PxDx Old: Grab just PIID, POID, and rank column. Change rank name to label as old.\n";
	print $ofh "# old.pxdx.rank<-old.pxdx1[,c(1,10,24)]\n";
	print $ofh "# colnames(old.pxdx.rank)[3] <- \"OLD_Rank\"\n";
	print $ofh "# \n";
	print $ofh "# #PxDx New: Grab just PIID, POID, and rank column. Change rank name to label as new.\n";
	print $ofh "# new.pxdx.rank<-new.pxdx1[,c(1,10,24)]\n";
	print $ofh "# colnames(new.pxdx.rank)[3] <- \"NEW_Prac_Fac_Natl_Rank\"\n";
	print $ofh "# \n";
	print $ofh "# #PxDx Compare: Merge ranks and run old rank vs. new rank crosstab\n";
	print $ofh "# merged.pxdx.rank<-merge(old.pxdx.rank,new.pxdx.rank,all=T)\n";
	print $ofh "# cat(\"\\n\\nPxDx: Rank Comparison\\n\\n\")\n";
	print $ofh "# table(merged.pxdx.rank[, 3:4],exclude=NULL)\n";
	print $ofh "\n";
	print $ofh "\n";
	print $ofh "sink()\n";
	print $ofh "\n";
	print $ofh "}\n";
	close $ofh;
	return $returnFile;
}



































