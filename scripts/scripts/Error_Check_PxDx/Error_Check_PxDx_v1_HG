#!/usr/bin/env perl

#Includes
use strict;
use warnings;
use Getopt::Long;
use Data::Dumper;
use File::Basename;
use Cwd;
my $scriptDir;
my $libDir;
my $envName;
my $qcProjScript;
BEGIN
{
	$scriptDir = Cwd::abs_path(dirname($0));
	my $lib = dirname($scriptDir);
	if($lib =~ m/mv_utilities/)
	{
		my $mvDir = $lib;
		$lib =~ s/mv_utilities.*/perl_utilities/;
		$mvDir =~ s/mv_utilities.*/mv_utilities/;
		$libDir = Cwd::abs_path($lib) . "/lib";
		$qcProjScript = $mvDir . "/scripts/scripts/qc_projections_v3.sh";
	}
	else
	{
		$lib = `conda info -e | grep '*'`;
		$lib =~ s/^.*\*//;
		$lib =~ s/^\s+|\s+$//g;
		my $sitePath = `python -m site | grep $lib | grep site-packages`;
		$sitePath =~ s/^\s+|\s+$//g;
		$sitePath =~ s/('|,)//g;
		$libDir = $sitePath . "/lib";
		$qcProjScript = $sitePath . "/scripts/scripts/qc_projections_v3.sh";
	}
	$envName = `conda info -e | grep '*'`;
	$envName =~ s/\*.*//;
	$envName =~ s/^\s+|\s+$//g;
}
use lib $libDir;
use MiscFunctions;

my @ogArgs = @ARGV;
if(-e "debug")
{
	print "ARGV for " . $0 . ":\n";
	print Dumper(@ogArgs);
}

my $timeBegin = time();

GetOptions(
);

my $rScript = generateRScript();
system("R CMD BATCH --vanilla " . $rScript);
system("rm " . $rScript);

#system("chmod 777 -R --silent .");

my $timeEnd = time();

my $runTime = $timeEnd - $timeBegin;
#print "\nProcess Complete: " . $0 . "\n";
my $minutes = $runTime/60;
#print "Job took " . $minutes ." minutes\n";

#End of main code

sub generateRScript
{
	my %args = @_;
	my $returnFile = "Error_Check_PxDx_v1_HG.R";
	open my $ofh, ">", $returnFile;
	print $ofh "#Directory used for testing\n";
	print $ofh "#setwd(\"T:/HealthGrades/2019_09_30_Refresh/2019_09_30_Client_Files/outDir/ncileGroups\")\n";
	print $ofh "\n";
	print $ofh "#Find all config directories within your folder for PxDx jobs only (ignore INA jobs)\n";
	print $ofh "matches.pxdx.files<-list.files(path=Sys.glob(\"group*/therapyLines/*/config\"),pattern=\"jobVendorSettings.tab\",recursive=F,full.names=T)\n";
	print $ofh "matches.pxdx<-dirname(matches.pxdx.files)\n";
	print $ofh "\n";
	print $ofh "#Run error check script for each PxDx job\n";
	print $ofh "for (i in 1:length(matches.pxdx)){\n";
	print $ofh "  setwd(matches.pxdx[i])\n";
	print $ofh "  print(getwd())\n";
	print $ofh "  error.check<-'" . $qcProjScript . " stderrout_proj > error_check.tab'\n";
	print $ofh "  system(error.check)\n";
	print $ofh "  setwd(\"../../../..\")\n";
	print $ofh "}\n";
	print $ofh "\n";
	print $ofh "#Print combined log for all jobs\n";
	print $ofh "matches.error.files<-list.files(path=Sys.glob(\"group*/therapyLines/*/config\"),pattern=\"error_check.tab\",recursive=F,full.names=T)\n";
	print $ofh "matches.error<-dirname(matches.error.files)\n";
	print $ofh "\n";
	print $ofh "sink(\"error_check_combined.txt\")\n";
	print $ofh "\n";
	print $ofh "for (i in 1:length(matches.error)){\n";
	print $ofh "  setwd(matches.error[i])\n";
	print $ofh "  print(getwd(),row.names=F)\n";
	print $ofh "  cat(\"\\n\")\n";
	print $ofh "  error_output <- read.delim(\"error_check.tab\",header=F,as.is=T,row.names=NULL,stringsAsFactors = FALSE)\n";
	print $ofh "  colnames(error_output)<-NULL\n";
	print $ofh "  print.data.frame(error_output,row.names=F,right=F,quote=F)\n";
	print $ofh "  cat(\"\\n\")\n";
	print $ofh "  setwd(\"../../../..\")\n";
	print $ofh "}\n";
	print $ofh "\n";
	print $ofh "sink()\n";
	close $ofh;
	return $returnFile;
}



































